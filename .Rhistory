group_by(disease.state) %>%
filter(chromosome_name == "19") %>%
summarize(mean = mean(Expression))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= "hgnc_symbol",
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
View(long_data)
View(long_data_gene)
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= "hgnc_symbol",
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
mutate(df, transcript_length = as.numeric(transcript_length))
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol","transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
mutate(df, transcript_length = as.numeric(transcript_length))
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol","transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
View(long_data)
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol","transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "description"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
library(GEOquery)
library(biomaRt)
library(tidyverse)
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_names(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
mart = human, useCache = FALSE)
View(names)
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol", "transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol", "transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
listFilters= c("hgnc_symbol", "transcript_length"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
mutate(chromosome_name = as.factor(as.numeric(chromosome_name))))
View(names)
View(names)
View(long_data_gene)
View(long_data_gene)
View(names)
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) %>%
# YOUR CODE HERE
#function that takes in data frame, and outputs same data frame with associated chromosome annotations.
identify_gene_length <- function(df){
names(df) <- c("sample", "hgnc_symbol", "Expression")
names <- getBM( attributes=c("hgnc_symbol", "chromosome_name", "transcript_length"),
filters= c("hgnc_symbol"),
values = unique(df$hgnc_symbol),
mart = human, useCache = FALSE)
left_join(df, names, by = "hgnc_symbol")
}
#There's a lot of variation in how the chromosomal location is annotated. To simplify things, let's keep only the autosomes (chr 1:22), and convert the chromosome names to a factor with levels ordered numerically
(data_with_chromosome <- identify_gene_length(long_data_gene) %>%
filter(chromosome_name %in% c(1:22)) )
names %>% group_by_(hgnc_symbol) %>% summarise(expression = mean(expression))
names %>% group_by(hgnc_symbol) %>% summarise(expression = mean(expression))
names %>% group_by(hgnc_symbol) %>% summarise(ave_expression = mean(expression))
View(full_data)
full_data %>%
ggplot(aes(x = sample, y = Expression)) +
geom_boxplot()
full_data %>%
ggplot(aes(x = sample, y = Expression)) +
geom_boxplot()
library(GEOquery)
library(biomaRt)
library(tidyverse)
full_data %>%
ggplot(aes(x = sample, y = Expression)) +
geom_boxplot()
full_data %>%
ggplot(aes(x = sample, y = Expression, fill = disease.state)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90))
full_data %>%
filter(sample == "GSM11810") %>%
ggplot(aes(x = chromosome_name, y = Expression)) +
geom_boxplot() +
scale_y_log10()
genetests <- full_data %>%
group_by(hgnc_symbol) %>%
summarize( pvalue = t.test(Expression ~ disease.state)$p.value)
genetests
ggplot(genetests) +
geom_histogram(aes(x = pvalue))
full_data %>%
ggplot(aes(x = sample, y = Expression)) +
geom_boxplot()
full_data %>%
ggplot(aes(x = sample, y = Expression)) +
geom_boxplot()
full_data %>%
ggplot(aes(x = sample, y = Expression, fill = disease.state)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90))
full_data %>%
filter(sample == "GSM11810") %>%
ggplot(aes(x = chromosome_name, y = Expression)) +
geom_boxplot() +
scale_y_log10()
genetests <- full_data %>%
group_by(hgnc_symbol) %>%
summarize( pvalue = t.test(Expression ~ disease.state)$p.value)
genetests
ggplot(genetests) +
geom_histogram(aes(x = pvalue))
View(full_data)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression))
# YOUR CODE HERE
mean_expression <- full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression))
# YOUR CODE HERE
mean_expression %>% mutate(new_column <- 1/AVG_expression)
# YOUR CODE HERE
mean_expression %>% mutate(1/AVG_expression)
# YOUR CODE HERE
full_data %>% mutate(Expression/mean_expression$AVG_expression)
View(mean_expression)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression))
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
mutate(AVG_expression)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
left_join(full_data, by = sample)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
left_join(by = sample)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
left_join(full_data, y, by = sample)
# YOUR CODE HERE
full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression)) %>%
left_join(full_data, y, by = sample)
# YOUR CODE HERE
mean_expression <- full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression))
left_join(full_data, mean_expression, by = sample)
# YOUR CODE HERE
mean_expression <- full_data %>%
group_by(sample) %>%
summarize(AVG_expression = mean(Expression))
left_join(full_data,mean_expression,by=sample)
gc()
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
summary(spider)
table(spider$leg,spider$type)
boxplot(spider$friction ~ spider$type * spider$leg,
col=c("grey90","grey40"), las=2,
main="Comparison of friction coefficients of different leg pairs")
spider.sub <- spider[spider$leg == "L1",]
fit <- lm(friction ~ type, data=spider.sub)
summary(fit)
plot(fit)
X <- model.matrix(~ type, data=spider.sub)
colnames(X)
X <- model.matrix(~ type + leg, data=spider)
colnames(X)
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
library(contrast) #Available from CRAN
set.seed(1)
x=c(rnorm(100,0,1)) ##real distribution
x[23] <- 100 ##mistake made in 23th measurement
y=c(rnorm(100,0,1)) ##real distribution
cor(x,y,method="spearman")
y[23] =99
cor(x,y,method="spearman")
(rank(x) - rank(y))^2
y = 2 * x
(rank(x) - rank(y))^2
cor(x,y,method="spearman")
y = sin(x)
(rank(x) - rank(y))^2
cor(x,y,method="spearman")
gc()
